
#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i =a; i<b;i++)
#define F0R(i,a) for (int i =0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1;i >=a;i--)
#define F0Rd(i,a) for (int i = (a)-1;i >=0; i--)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define pr(x) cout << x << "\n"
#define bug(x) cout << x << " "
#define trav(a,x) for (auto& a : x)

int T, N, d, A, B;

int digits(int i){
    int ans = 0;
    while (i != 0){
        i /= 10;
        ans++;
    }
    return ans;
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> T;
    F0R(i, T){
        cin >> N;
        d = digits(N);
        A = 0;
        B = 0;
        F0R(j, d){
            int rem = N % 10;
            N -= rem;
            N /= 10;
            if (rem == 0) continue;
            else if (rem != 5){
                A += 1 * pow(10, j);
                B += (rem - 1) * pow (10, j);
            }
            else if (rem == 5){
                A += 2 * pow(10, j);
                B += 3 * pow(10, j);
            }
        }
        cout << "Case #" << i+1 << ": " << A << " " << B << "\n";
        
    }


    

   
    
    // DEBUGGING PROCEDURE
    // Make sure algorithm is right first
    // Check edge cases
    // Check precision errors, ll vs int
    // Check array bounds (be careful about assumptions)
    // Check every line of code carefully
    // Check variable names, overlap with macros
    
    return 0;
}


