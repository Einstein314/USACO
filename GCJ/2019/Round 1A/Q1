
#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;


int T, R, C;

void solve(){
    cin >> R >> C;
    for (int k = 0; k < 6969; ++k){
        vii vec, sol;
        for (int i = 0; i < R; ++i){
            for (int j = 0; j < C; ++j){
                vec.push_back({i,j});
            }
        }
        random_shuffle(vec.begin(), vec.end());
        while(((int) vec.size())){
            int ind = -1;
            for (int i = 0; i < (int) vec.size(); ++i){
                if (!sol.size() || (sol.back().first != vec[i].first && sol.back().second != vec[i].second &&
                                    sol.back().first + sol.back().second != vec[i].first + vec[i].second &&
                                    sol.back().first - sol.back().second != vec[i].first - vec[i].second)){
                    ind = i;
                    break;
                }
            }
            if (ind == -1) break;
            sol.push_back(vec[ind]);
            vec.erase(vec.begin() + ind);
        }
        if (((int) sol.size()) == R*C){
            cout << "POSSIBLE\n";
            for (int i = 0; i < (int) sol.size(); ++i){
                cout << sol[i].first + 1 << " " << sol[i].second + 1<< "\n";
            }
            return;
        }
    }
    cout << "IMPOSSIBLE\n";
    return;
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> T;
    for(int cnum = 1; cnum <= T; ++cnum){
        cout << "Case #" << cnum << ": ";
        solve();
    }
    
    return 0;
}


