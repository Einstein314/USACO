#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i =a; i<b;i++)
#define F0R(i,a) for (int i =0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1;i >=a;i--)
#define F0Rd(i,a) for (int i = (a)-1;i >=0; i--)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define pr(x) cout << x << "\n"
#define bug(x) cout << x << " "
#define trav(a,x) for (auto& a : x)

struct Edge{
    int u, v;
};
int n, m, u, v, par[200500], parity;
vi adj[200500], red, blue;
vector<Edge> edges;
bool visited[200500], bipar;
string ans;

void dfsbp(int x){
    if (visited[x]) return;
    visited[x] = 1;
    for (auto a : adj[x]){
        if (par[a] != -1 && par[a] != (par[x] + 1) % 2){
            bipar = 0;
        }
        par[a] = (par[x] + 1) % 2;
        dfsbp(a);
    }
}


int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n >> m;
    F0R(i, m){
        cin >> u >> v;
        adj[u].pb(v);
        adj[v].pb(u);
        Edge temp = {u, v};
        edges.pb(temp);
    }
    memset(par, -1, sizeof(par));
    bipar = 1;
    dfsbp(1);
    if (!bipar){
        cout << "NO\n";
        return 0;
    }
    for (auto ed : edges){
        if (par[ed.u]){
            ans += "1";
        }
        else ans += "0";
    }
    cout << "YES\n" << ans << "\n";
    

   
    
    // DEBUGGING PROCEDURE
    // Make sure algorithm is right first
    // Check edge cases
    // Check precision errors, ll vs int
    // Check array bounds (be careful about assumptions)
    // Check every line of code carefully
    // Check variable names, overlap with macros
    
    return 0;
}


