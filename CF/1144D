#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i =a; i<b;i++)
#define F0R(i,a) for (int i =0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1;i >=a;i--)
#define F0Rd(i,a) for (int i = (a)-1;i >=0; i--)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define pr(x) cout << x << "\n"
#define bug(x) cout << x << " "
#define trav(a,x) for (auto& a : x)

int n, arr[200500], mf, maxf;
map<int, int> freqm;
vi mfind;


int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n;
    F0R(i, n){
        cin >> arr[i];
        freqm[arr[i]]++;
        if (freqm[arr[i]] > maxf){
            maxf = freqm[arr[i]];
            mf = arr[i];
        }
    }
    F0R(i, n){
        if (arr[i] == mf) mfind.pb(i);
    }
    cout << n - maxf << "\n";
    if (n == maxf) return 0;
    F0R(i, sz(mfind)){
        if (i == 0){
            F0Rd(j, mfind[i]){
                if (arr[j] < mf) cout << 1 << " " << j+1 << " " << j+2 << "\n";
                else cout << 2 << " " << j+1 << " " << j+2 << "\n";
            }
        }
        else{
            FORd(j, mfind[i-1] + 1, mfind[i]){
                if (arr[j] < mf) cout << 1 << " " << j+1 << " " << j+2 << "\n";
                else cout << 2 << " " << j+1 << " " << j+2 << "\n";
            }
        }
    }
    FOR(j, mfind[sz(mfind) - 1]+1, n){
        if (arr[j] < mf) cout << 1 << " " << j+1 << " " << j << "\n";
        else cout << 2 << " " << j+1 << " " << j << "\n";
    }
    
   
    
    // DEBUGGING PROCEDURE
    // Make sure algorithm is right first
    // Check edge cases
    // Check precision errors, ll vs int
    // Check array bounds (be careful about assumptions)
    // Check every line of code carefully
    // Check variable names, overlap with macros
    
    return 0;
}


