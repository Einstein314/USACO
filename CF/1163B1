#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i = a; i < b; i++)
#define F0R(i,a) for (int i = 0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)
#define F0Rd(i,a) for (int i = (a)-1; i>=0; i--)
#define pb push_back
#define all(x) x.begin(), x.end()

set<int> colors;
int n, arr[100500], maxst, pref[100500], cnt[100500], maxp;

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n;
    F0R(i,n){
        
        cin >> arr[i];
        colors.insert(arr[i]);
        if (pref[arr[i]] == 0) cnt[1]++;
        else{
            cnt[pref[arr[i]]]--;
            cnt[pref[arr[i]]+1]++;
        }
        pref[arr[i]]++;
        maxp = max(maxp, pref[arr[i]]);
        
        if (maxp == i + 1){
            maxst = max(maxst, i);
            continue;
        }
        if ((int) colors.size() == i+1){
            maxst = max(maxst, i);
            continue;
        }
        if (maxp * cnt[maxp] == i && cnt[1] == 1){
            maxst = max(maxst, i);
            continue;
        }
        if (cnt[maxp] == 1 && cnt[maxp-1] * (maxp-1) == i + 1 - maxp){
            maxst = max(maxst, i);
            continue;
        }
    }
    
    cout << maxst+1 << endl;
    

    
    return 0;
}
