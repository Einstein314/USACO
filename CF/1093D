//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i =a; i<b;i++)
#define F0R(i,a) for (int i =0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1;i >=a;i--)
#define F0Rd(i,a) for (int i = (a)-1;i >=0; i--)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define pr(x) cout << x << "\n"
#define bug(x) cout << x << " "
#define trav(a,x) for (auto& a : x)


int n, m, u, v, par[300500], t, r;
const ll MOD = 998244353;
ll tans;
vi adj[300500], temp;
bool bipar;
queue<int> q;

ll exp(int b, int k){
    ll ans = 1;
    F0R(l, k){
        ans *= b;
        ans %= MOD;
    }
    return ans;
}


void bip(){
    FOR(j, 1, n+1){
        if (par[j] == -1){
            temp.clear();
            q.push(j);
            temp.pb(j);
            par[j] = 0;
            while (!q.empty()){
                int w = q.front();
                q.pop();
                for (auto a : adj[w]){
                    if (par[a] == -1){
                        par[a] = par[w] ^ 1;
                        q.push(a);
                        temp.pb(a);
                    }
                    else{
                        bipar &= (par[w] != par[a]);
                    }
                }
            }
            r = 0;
            F0R(k, sz(temp)){
                if (par[temp[k]] == 1) r++;
            }
            if (sz(temp) == 1){
                tans *= 3;
                tans %= MOD;
            }
            else if (sz(temp) > 1){
                tans *= (exp(2, r) + exp(2, sz(temp) - r));
                tans %= MOD;
            }
        }
        
    }
}


int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> t;
    F0R(i, t){
        //remember to reset stuff
        
        cin >> n >> m;
        if(m == 0){
            cout << exp(3, n) << "\n";
            continue;
        }
        
        FOR(j, 1, n+1){
            adj[j].clear();
            par[j] = -1;
        }
        
        F0R(j, m){
            cin >> u >> v;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        bipar = 1;
        tans = 1;
        bip();
        if (!bipar){
            cout << 0 << "\n";
        }
        else{
            cout << tans << "\n";
        }
    }
    
    // DEBUGGING PROCEDURE
    // Make sure algorithm is right first
    // Check edge cases
    // Check precision errors, ll vs int
    // Check array bounds (be careful about assumptions)
    // Check every line of code carefully
    // Check variable names, overlap with macros
    
    return 0;
}


