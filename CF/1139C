//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i =a; i<b;i++)
#define F0R(i,a) for (int i =0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1;i >=a;i--)
#define F0Rd(i,a) for (int i = (a)-1;i >=0; i--)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define pr(x) cout << x << "\n"
#define bug(x) cout << x << " "
#define trav(a,x) for (auto& a : x)


int n, k, u, v, x, vis[100500], cnt;
const int MOD = 1000000007;
vii adj[100500];
ll ans;

ll exp(int base, int e){
    ll temp = 1;
    F0R(j, e){
        temp *= base;
        temp %= MOD;
    }
    return temp;
}

void dfs(int a){
    if (vis[a]) return;
    vis[a] = 1;
    cnt++;
    for (auto b : adj[a]){
        if(!b.s){
            dfs(b.f);
        }
    }
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n >> k;
    F0R(i, n-1){
        cin >> u >> v >> x;
        adj[u].pb({v,x});
        adj[v].pb({u,x});
    }
    ans = 0;
    ans = (ans + exp(n, k)) % MOD;
    ans = (ans - n + MOD) % MOD;
    FOR(i, 1, n+1){
        cnt = 0;
        if(!vis[i]){
            dfs(i);
        }
        ans = (ans - exp(cnt, k) + MOD) % MOD;
        ans = (ans + cnt) % MOD;
    }
    cout << ans << "\n";
    
    // DEBUGGING PROCEDURE
    // Make sure algorithm is right first
    // Check edge cases
    // Check precision errors, ll vs int
    // Check subtraction errors when taking mod
    // Check array bounds (be careful about assumptions)
    // Check every line of code carefully
    // Check variable names, overlap with macros
    
    return 0;
}


