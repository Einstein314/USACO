#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i = a; i < b; i++)
#define F0R(i,a) for (int i = 0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)
#define F0Rd(i,a) for (int i = (a)-1; i>=0; i--)
#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define f first
#define s second 
#define newl '\n'
#define mp make_pair

int n, b[400500], sieve[2751000], arr[2751000];
map<int, int> primes;
vi a, smol;

void initsieve(){
	FOR(i, 2, 2751000){
		if (sieve[i]) continue;
		for (int u = 2*i; u <= 2751000; u+=i) sieve[u] = 1;
	}
}


int main(){
   // ios::sync_with_stdio(0);
   // cin.tie(0);
    
	initsieve();
	cin >> n;
	F0R(i,2*n){
		cin >> b[i];
		arr[b[i]]++;
	}
	sort(b, b+2*n);
	int p = 0;
	FOR(i, 2, 2750132){
		if (!sieve[i]){
			p++;
			primes.insert(mp(i, p));
			if (i < 450) smol.pb(i);
		}	
	}
	F0Rd(i, 2*n){
		if (!sieve[b[i]] && arr[b[i]] > 0){
			int tmp = primes[b[i]];
			a.pb(tmp);
			arr[tmp]--;
			arr[b[i]]--;
		}
		else if (sieve[b[i]] && arr[b[i]] > 0){
			int tmp = b[i];
			for (auto b : smol){
				if (tmp % b == 0 && arr[tmp/b] > 0){
					a.pb(tmp);
					arr[tmp/b]--;
					arr[tmp]--;
					break;
				}
			}	
		}
	}
	for (auto b : a){
		cout << b << " ";
	}
	cout << newl;












    return 0;
}
