#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i = a; i < b; i++)
#define F0R(i,a) for (int i = 0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)
#define F0Rd(i,a) for (int i = (a)-1; i>=0; i--)
#define pb push_back
#define all(x) x.begin(), x.end()


int h, w, rscnt[505], hscnt[505];
string pic[505];

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    
    cin >> h >> w;
    if (h <= 2 || w <= 2){
        cout << "NO\n";
        return 0;
    }
    
    int ocnt = 0;
    vi ind;
    F0R(i,h){
        cin >> pic[i];
        int tmp = 0;
        F0R(j, w){
            if (pic[i][j] == '*') tmp++;
        }
        rscnt[i] = tmp;
        if (tmp > 1){
            ocnt++;
            ind.pb(i);
        }
    }
	if (ocnt < 1){
		cout << "NO\n";
		return 0;
	}
    int ccnt = 0;
    vi cind;
    F0R(i,w){
        int tmp = 0;
        F0R(j,h){
            if (pic[j][i] == '*') tmp++;
        }
        hscnt[i] = tmp;
        if (tmp > 1){
            ccnt++;
            cind.pb(i);
        }
    }
	if (ccnt < 1){
		cout << "NO\n";
		return 0;
	}
    bool works = 1;
    F0R(i,h){
        F0R(j,w){
            if (pic[i][j] == '*' && i != ind[0] && j != cind[0]){
                works = 0;
                break;
            }
        }
    }
    int mini = 0;
    F0R(j,w){
        if (pic[ind[0]][j] == '*'){
            mini = j;
            break;
        }
    }
    int maxi = 0;
    F0Rd(j,w){
        if (pic[ind[0]][j] == '*'){
            maxi = j;
            break;
        }
    }
    int cmini = 0;
    int cmaxi = 0;
    F0R(i,h){
        if(pic[i][cind[0]] == '*'){
            cmini = i;
            break;
        }
    }
    F0Rd(i,h){
        if (pic[i][cind[0]] == '*'){
            cmaxi = i;
            break;
        }
    }
    FOR(j,mini,maxi+1){
        if (pic[ind[0]][j] != '*') works  = 0;
    }
    FOR(i,cmini, cmaxi+1){
        if (pic[i][cind[0]] != '*') works = 0;
    }
    
    if (ocnt != 1 || ccnt != 1){
        cout << "NO\n";
        return 0;
    }
    else if (pic[ind[0]][cind[0]] != '*'){
        cout << "NO\n";
    }
    else if (!works){
        cout << "NO\n";
    }
    else if (ind[0] == 0 || ind[0] == h-1 || cind[0] == 0 || cind[0] == w-1){
        cout << "NO\n";
    }
   else if (pic[ind[0]][cind[0] + 1] != '*' || pic[ind[0]+1][cind[0]] != '*' || pic[ind[0]-1][cind[0]] != '*' || pic[ind[0]][cind[0]-1] != '*'){
       cout << "NO\n";
    }
    else{
        cout << "YES\n";
        
    }
    
    
    
    
    
    
    
    
    
    return 0;
}
