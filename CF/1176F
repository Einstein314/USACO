#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vii;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define FOR(i,a,b) for (int i = a; i < b; i++)
#define F0R(i,a) for (int i = 0; i < a; i++)
#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)
#define F0Rd(i,a) for (int i = (a)-1; i>=0; i--)
#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define f first
#define s second 
#define newl '\n'
#define mp make_pair


int n, k, c, d;
ll dp[200100][10];

int main(){
   // ios::sync_with_stdio(0);
   // cin.tie(0);

	cin >> n;
	F0R(i,200100){
		F0R(j,10){
			dp[i][j] = -1;
		}
	}
	dp[0][0] = 0;
	F0R(i,n){
		cin >> k;
		vi co[4];
		F0R(j,k){
			cin >> c >> d;
			co[c].pb(d);
		}
		F0R(j,3){
			sort(co[j+1].rbegin(), co[j+1].rend());
		}
		F0R(j,10){
			dp[i+1][j] = max(dp[i+1][j], dp[i][j]);
			if (sz(co[1]) > 0){
				if (dp[i][(j-1+10) % 10] != -1){
					if (j == 0) dp[i+1][j] = max(dp[i+1][j], dp[i][9] + 2*co[1][0]);	
					else dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 1 + 10) % 10] + co[1][0]); 
				}
			}
			if (sz(co[1]) > 1){
				if (dp[i][(j-2+10) % 10] != -1){
					if (j == 1 || j == 0) dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 2 + 10) % 10] + 2*co[1][0] + co[1][1]);
					else dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 2 + 10) % 10] + co[1][0] + co[1][1]);
				}
			}
			if (sz(co[1]) > 2){
				if (dp[i][(j-3+10) % 10] != -1){
					if (j == 2 || j == 1 || j == 0) dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 3 + 10) % 10] + 2*co[1][0] + co[1][1] + co[1][2]);
					else dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 3 + 10) % 10] + co[1][0] + co[1][1] + co[1][2]);
				}
			}
			if (sz(co[2]) > 0){
				if (dp[i][(j-1+10) % 10] != -1){
					if (j == 0) dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 1 + 10) % 10] + 2 * co[2][0]);
					else dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 1 + 10) % 10] + co[2][0]);
				}
			}
			if (sz(co[3]) > 0){
				if (dp[i][(j-1+10) % 10] != -1){
					if (j == 0) dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 1 + 10) % 10] + 2 * co[3][0]);
					else dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 1 + 10) % 10] + co[3][0]);
				}
			}
			if (sz(co[2]) > 0 && sz(co[1]) > 0){
				if (dp[i][(j-2+10) % 10] != -1){
					if (j == 1 || j == 0) dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 2 + 10) % 10] + 2*max(co[2][0], co[1][0]) + min(co[2][0], co[1][0]));
					else dp[i+1][j] = max(dp[i+1][j], dp[i][(j - 2 + 10) % 10] + co[2][0] + co[1][0]);
				}
			}
		}
	}
	ll ans = 0;
	F0R(j,10){
		ans = max(ans, dp[n][j]);
	}


	cout << ans << newl;












    return 0;
}
